#!/bin/bash

# -----------------------------------------------------------------
# SHELL CONFIGURATIONS
# -----------------------------------------------------------------

export EDITOR="vim"

export CLICOLOR="xterm-color"
export DISPLAY=:0.0
export LC_ALL="en_US.UTF-8"


# -----------------------------------------------------------------
# ALIASES
# -----------------------------------------------------------------

# Add default tags to ls
export LS_DEFAULTS="-ahBG"

alias ppsql="psql"

# Test and alias ls
test -n "$LS_DEFAULTS" &&
    alias ls="command ls $LS_DEFAULTS"

alias ll="command ls -l $LS_DEFAULTS"

# -----------------------------------------------------------------
# CUSTOM FUNCTIONS
# -----------------------------------------------------------------

alias dlclean="rm ~/Downloads/*.png && rm ~/Downloads/*.tif && rm ~/Downloads/*.zip"

idea() {
    if [ ! -d $1 ] && [ ! -f $1 ]; then
        echo "$1 doesn't exist"
    else
        file_name="$(basename "$1")"
        full_path="$(cd "$(dirname "$1")" && pwd)"
        cd "$full_path"
        cur_idea_dir=""
        while [ ! "$(pwd)" == "/" ]; do
            cur_idea_dir="$(find . -maxdepth 1 -name ".idea")"
            if [ -z $cur_idea_dir ]; then
                cd ..
            else
                break
            fi
        done
        
        if [ ! -z $cur_idea_dir ]; then
            cd "$cur_idea_dir/.."
            idea_dir="$(pwd)"
            echo "$idea_dir"
            echo "$full_path/$file_name"
            nohup /opt/homebrew-cask/Caskroom/intellij-idea-bundled-jdk/14.1.4/IntelliJ\ IDEA\ 14.app/Contents/MacOS/idea "$idea_dir" "$full_path/$file_name" &
        else
            echo "No .idea file found for $full_path/$file_name"
        fi
    fi
}


# -----------------------------------------------------------------
# SOURCING LOCAL .SHELLRC
# -----------------------------------------------------------------

if [ -f ~/.shellrc.local ]; then
    source ~/.shellrc.local
fi

if [ -f ~/.dotfiles_config ]; then
    source ~/.dotfiles_config
fi

if [ -f ~/.localenv ]; then
    source ~/.localenv
fi

if [ -f ~/.git-completion.bash ]; then
    source ~/.git-completion.bash
fi

# -----------------------------------------------------------------
# CAPTURE BREW AND PYTHON INSTALLS TO SAVE
# -----------------------------------------------------------------

brew() {
    if ! [ -z $DOTFILES_CONFIG_DIR ]; then
        if [ $1 == "install" ]; then
            target=$DOTFILES_CONFIG_DIR/brew_packages.txt
            if [ -z "$(grep -E "^$2$" $target)" ]; then
                echo $2 >> $target
            fi
        elif [ $1 == "cask" ] && [ $2 == "install" ]; then
            target=$DOTFILES_CONFIG_DIR/cask_apps.txt
            if [ -z "$(grep -E "^$3$" $target)" ]; then
                echo $3 >> $target
            fi
        fi
    fi
    command brew $@
}

pip() {
    if ! [ -z $DOTFILES_CONFIG_DIR ]; then
        if [ $1 == "install" ]; then
            target=$DOTFILES_CONFIG_DIR/python_packages.txt
            if [ -z "$(grep -E "^$2(=|$)" $target)" ]; then
                echo $2 >> $target 
            fi
        fi
    fi
    command pip $@
}

# -----------------------------------------------------------------
# AUTOMATED DOTFILES VERSION CONTROL
# -----------------------------------------------------------------

if ! [ -z $DOTFILES_CONFIG_DIR ]; then
    OLD_PWD="$(pwd)"
    cd $DOTFILES_CONFIG_DIR
    if ! [ -z "$(git status --porcelain)" ]; then
        git status --porcelain
        echo "Uncommitted dotfile changes detected (shown above); commit now?"
        echo -n "(Y / n) > "
        read confirm
        if [ $confirm == "Y" ] || [ $confirm == "y" ]; then
            git add .
            git commit -m "auto update"
            git push origin master
        fi
    fi
    cd $OLD_PWD
fi

# -----
# Other Fun Stuff
# -----

export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
